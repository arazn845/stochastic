###################################################################
#packages
###################################################################
using Gurobi
using JuMP
using NamedArrays, DataStructures, DataFrames, CSV
using Distributions, Random
using DelimitedFiles
using LinearAlgebra
###################################################################
# Model
###################################################################
m = Model(Gurobi.Optimizer)
###################################################################
#parameters
###################################################################
𝚽 = ["skill_1", "skill_2", "skill_3"]
J=3
H=10
T=3
Random.seed!(123)
D = round.( 1 .+  randn(J,T), digits=2 )
#D = fill(1.5,J,T)
zᵖₕⱼ = [    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000;    80_000 100_000 120_000]
χᵐᵃˣₕⱼ = fill(0.5, H,J)

###################################################################
# variables
###################################################################
@variable(m, ψ[1:H, 1:J], Bin)
@variable(m, 0 ≤ χ[1:H, 1:J] ≤ 1)
@variable(m, α[1:H, 1:J, 1:T], Bin)

###################################################################
# objective function
###################################################################
@objective(m, Min, sum(zᵖₕⱼ[h,j] * ψ[h,j]  for h=1:H for j=1:J ) )

###################################################################
# constraints
###################################################################
@constraint(m, s1_c1_part1[ h=1:H, j=1:J ], χ[h,j] ≥ ψ[h,j] )
@constraint(m, s1_c1_part2[ h=1:H, j=1:J ], χ[h,j] ≤ χᵐᵃˣₕⱼ[h,j] +  ψ[h,j] * 10000 )
@constraint(m, s1_c2[h in 1:H], sum(χ[h,j] for j in 1:J) ≤ sum( ψ[h,j] for j in 1:J ) * 10000 )

@constraint(m, s1_operational_c5[ h=1:H, j=1:J, t=1:T ], α[h,j,t] ≤ χ[h,j] * 10000 )
@constraint(m, s1_operational_c6[ h=1:H, t=1:T ], sum(α[h,j,t] for j=1:J ) ≤ 1 )
@constraint(m, s1_operational_c7[ t=1:T, j=1:J ], sum( α[h,j,t] * χ[h,j] for h=1:H ) ≥ D[j,t] )

optimize!(m)
print(m)

value.(ψ)

df_ψ = DataFrame( value.(ψ), :auto );
rename!(df_ψ, 𝚽)
pwd()
CSV.write("df_psi.csv", df_ψ)


df_χ = DataFrame(value.(χ), :auto );
rename!(df_ψ, 𝚽)
CSV.write("df_chi.csv", df_χ)


value.(α)

